#!/bin/sh

# SUSv3 compliant gsed tests.
# Copyright 2005 by Rob Landley <rob@landley.net>
# Licengsed under GPLv2, see file LICENSE in this source tree.

. ./testing.sh

# testing "description" "commands" "result" "infile" "stdin"

# Corner cases
testing "gsed no files (stdin)" 'gsed ""' "hello\n" "" "hello\n"
testing "gsed explicit stdin" 'gsed "" -' "hello\n" "" "hello\n"
testing "gsed handles empty lines" "gsed -e 's/\$/@/'" "@\n" "" "\n"
testing "gsed stdin twice" 'gsed "" - -' "hello" "" "hello"

# Trailing EOF.
#	Match $, at end of each file or all files?

# -e corner cases
#	without -e
#	multiple -e
#		interact with a
#	-eee arg1 arg2 arg3
# -f corner cases
#	-e -f -e
# -n corner cases
#	no newline at EOF?
# -r corner cases
#	Just make sure it works.
# -i corner cases:
#	gsed -i -
#	permissions
#	-i on a symlink
#	on a directory
#       With $ last-line test
# Continue with \
#       End of script with trailing \

# command list
testing "gsed accepts blanks before command" "gsed -e '1 d'" "" "" ""
testing "gsed accepts newlines in -e" "gsed -e 'i\
1
a\
3'" "1\n2\n3\n" "" "2\n"
testing "gsed accepts multiple -e" "gsed -e 'i\' -e '1' -e 'a\' -e '3'" \
	"1\n2\n3\n" "" "2\n"

# substitutions
testing "gsed -n" "gsed -n -e s/foo/bar/ -e s/bar/baz/" "" "" "foo\n"
testing "gsed with empty match" "gsed 's/z*//g'" "string\n" "" "string\n"
testing "gsed s//p" "gsed -e s/foo/bar/p -e s/bar/baz/p" "bar\nbaz\nbaz\n" \
	"" "foo\n"
testing "gsed -n s//p" "gsed -ne s/abc/def/p" "def\n" "" "abc\n"
testing "gsed s//g (exhaustive)" "gsed -e 's/[[:space:]]*/,/g'" ",1,2,3,4,5,\n" \
	"" "12345\n"
testing "gsed s arbitrary delimiter" "gsed -e 's woo boing '" "boing\n" "" "woo\n"
testing "gsed s chains" "gsed -e s/foo/bar/ -e s/bar/baz/" "baz\n" "" "foo\n"
testing "gsed s chains2" "gsed -e s/foo/bar/ -e s/baz/nee/" "bar\n" "" "foo\n"
testing "gsed s [delimiter]" "gsed -e 's@[@]@@'" "onetwo" "" "one@two"
testing "gsed s with \\t (GNU ext)" "gsed 's/\t/ /'" "one two" "" "one\ttwo"

# branch
testing "gsed b (branch)" "gsed -e 'b one;p;: one'" "foo\n" "" "foo\n"
testing "gsed b (branch with no label jumps to end)" "gsed -e 'b;p'" \
	"foo\n" "" "foo\n"

# test and branch
testing "gsed t (test/branch)" "gsed -e 's/a/1/;t one;p;: one;p'" \
	"1\n1\nb\nb\nb\nc\nc\nc\n" "" "a\nb\nc\n"
testing "gsed t (test/branch clears test bit)" "gsed -e 's/a/b/;:loop;t loop'" \
	"b\nb\nc\n" "" "a\nb\nc\n"
testing "gsed T (!test/branch)" "gsed -e 's/a/1/;T notone;p;: notone;p'" \
	"1\n1\n1\nb\nb\nc\nc\n" "" "a\nb\nc\n"

test x"$SKIP_KNOWN_BUGS" = x"" && {
# Normal gsed end-of-script doesn't print "c" because n flushed the pattern
# space.  If n hits EOF, pattern space is empty when script ends.
# Query: how does this interact with no newline at EOF?
testing "gsed n (flushes pattern space, terminates early)" "gsed -e 'n;p'" \
	"a\nb\nb\nc\n" "" "a\nb\nc\n"
}
# non-GNU sed: N does _not_ flush pattern space, therefore c is eaten @ script end
# GNU sed: N flushes pattern space, therefore c is printed too @ script end
testing "gsed N (flushes pattern space (GNU behavior))" "gsed -e 'N;p'" \
	"a\nb\na\nb\nc\n" "" "a\nb\nc\n"

testing "gsed N test2" "gsed ':a;N;s/\n/ /;ta'" \
	"a b c\n" "" "a\nb\nc\n"

testing "gsed N test3" "gsed 'N;s/\n/ /'" \
	"a b\nc\n" "" "a\nb\nc\n"

testing "gsed address match newline" 'gsed "/b/N;/b\\nc/i woo"' \
	"a\nwoo\nb\nc\nd\n" "" "a\nb\nc\nd\n"

# Multiple lines in pattern space
testing "gsed N (stops at end of input) and P (prints to first newline only)" \
	"gsed -n 'N;P;p'" "a\na\nb\n" "" "a\nb\nc\n"

# Hold space
testing "gsed G (append hold space to pattern space)" 'gsed G' "a\n\nb\n\nc\n\n" \
	"" "a\nb\nc\n"
#testing "gsed g/G (swap/append hold and patter space)"
#testing "gsed g (swap hold/pattern space)"

testing "gsed d ends script iteration" \
	"gsed -e '/ook/d;s/ook/ping/p;i woot'" "" "" "ook\n"
testing "gsed d ends script iteration (2)" \
	"gsed -e '/ook/d;a\' -e 'bang'" "woot\nbang\n" "" "ook\nwoot\n"

# Multiple files, with varying newlines and NUL bytes
test x"$SKIP_KNOWN_BUGS" = x"" && {
testing "gsed embedded NUL" "gsed -e 's/woo/bang/'" "\0bang\0woo\0" "" \
	"\0woo\0woo\0"
}
testing "gsed embedded NUL g" "gsed -e 's/woo/bang/g'" "bang\0bang\0" "" \
	"woo\0woo\0"
test x"$SKIP_KNOWN_BUGS" = x"" && {
$ECHO -e "/woo/a he\0llo" > sed.commands
testing "gsed NUL in command" "gsed -f sed.commands" "woo\nhe\0llo\n" "" "woo"
rm sed.commands
}

# gsed has funky behavior with newlines at the end of file.  Test lots of
# corner cases with the optional newline appending behavior.

testing "gsed normal newlines" "gsed -e 's/woo/bang/' input -" "bang\nbang\n" \
	"woo\n" "woo\n"
testing "gsed leave off trailing newline" "gsed -e 's/woo/bang/' input -" \
	"bang\nbang" "woo\n" "woo"
testing "gsed autoinsert newline" "gsed -e 's/woo/bang/' input -" "bang\nbang" \
	"woo" "woo"
testing "gsed empty file plus cat" "gsed -e 's/nohit//' input -" "one\ntwo" \
	"" "one\ntwo"
testing "gsed cat plus empty file" "gsed -e 's/nohit//' input -" "one\ntwo" \
	"one\ntwo" ""
test x"$SKIP_KNOWN_BUGS" = x"" && {
testing "gsed append autoinserts newline" "gsed -e '/woot/a woo' -" \
	"woot\nwoo\n" "" "woot"
}
testing "gsed insert doesn't autoinsert newline" "gsed -e '/woot/i woo' -" \
	"woo\nwoot" "" "woot"
testing "gsed print autoinsert newlines" "gsed -e 'p' -" "one\none" "" "one"
testing "gsed print autoinsert newlines two files" "gsed -e 'p' input -" \
	"one\none\ntwo\ntwo" "one" "two"
testing "gsed noprint, no match, no newline" "gsed -ne 's/woo/bang/' input" \
	"" "no\n" ""
testing "gsed selective matches with one nl" "gsed -ne 's/woo/bang/p' input -" \
	"a bang\nc bang\n" "a woo\nb no" "c woo\nd no"
testing "gsed selective matches insert newline" \
	"gsed -ne 's/woo/bang/p' input -" "a bang\nb bang\nd bang" \
	"a woo\nb woo" "c no\nd woo"
testing "gsed selective matches noinsert newline" \
	"gsed -ne 's/woo/bang/p' input -" "a bang\nb bang" "a woo\nb woo" \
	"c no\nd no"
testing "gsed clusternewline" \
	"gsed -e '/one/a 111' -e '/two/i 222' -e p input -" \
	"one\none\n111\n222\ntwo\ntwo" "one" "two"
testing "gsed subst+write" \
	"gsed -e 's/i/z/' -e 'woutputw' input -; $ECHO -n X; cat outputw" \
	"thzngy\nagaznXthzngy\nagazn" "thingy" "again"
rm outputw
testing "gsed trailing NUL" \
	"gsed 's/i/z/' input -" \
	"a\0b\0\nc" "a\0b\0" "c"
testing "gsed escaped newline in command" \
	"gsed 's/a/z\\
z/' input" \
	"z\nz" "a" ""

# Test end-of-file matching behavior

testing "gsed match EOF" "gsed -e '"'$p'"'" "hello\nthere\nthere" "" \
	"hello\nthere"
testing "gsed match EOF two files" "gsed -e '"'$p'"' input -" \
	"one\ntwo\nthree\nfour\nfour" "one\ntwo" "three\nfour"
# gsed match EOF inline: gnu gsed 4.1.5 outputs this:
#00000000  6f 6e 65 0a 6f 6f 6b 0a  6f 6f 6b 0a 74 77 6f 0a  |one.ook.ook.two.|
#00000010  0a 74 68 72 65 65 0a 6f  6f 6b 0a 6f 6f 6b 0a 66  |.three.ook.ook.f|
#00000020  6f 75 72                                          |our|
# which looks buggy to me.
$ECHO -ne "three\nfour" > input2
testing "gsed match EOF inline" \
	"gsed -e '"'$i ook'"' -i input input2 && cat input input2" \
	"one\nook\ntwothree\nook\nfour" "one\ntwo" ""
rm input2

# Test lie-to-autoconf

testing "gsed lie-to-autoconf" "gsed --version | grep -o 'GNU gsed version '" \
	"GNU gsed version \n" "" ""

# Jump to nonexistent label
test x"$SKIP_KNOWN_BUGS" = x"" && {
# Incompatibility: illegal jump is not detected if input is ""
# (that is, no lines at all). GNU gsed 4.1.5 complains even in this case
testing "gsed nonexistent label" "gsed -e 'b walrus' 2>/dev/null || echo yes" \
	"yes\n" "" ""
}

testing "gsed backref from empty s uses range regex" \
	"gsed -e '/woot/s//eep \0 eep/'" "eep woot eep" "" "woot"

testing "gsed backref from empty s uses range regex with newline" \
	"gsed -e '/woot/s//eep \0 eep/'" "eep woot eep\n" "" "woot\n"

# -i with no filename

touch ./-  # Detect gnu failure mode here.
testing "gsed -i with no arg [GNUFAIL]" "gsed -e '' -i 2> /dev/null || echo yes" \
	"yes\n" "" ""
rm ./-     # Clean up

testing "gsed s/xxx/[/" "gsed -e 's/xxx/[/'" "[\n" "" "xxx\n"

# Ponder this a bit more, why "woo not found" from gnu version?
#testing "gsed doesn't substitute in deleted line" \
#	"gsed -e '/ook/d;s/ook//;t woo;a bang;'" "bang" "" "ook\n"

# This makes both seds very unhappy.  Why?
#testing "gsed -g (exhaustive)" "gsed -e 's/[[:space:]]*/,/g'" ",1,2,3,4,5," \
#	"" "12345"

# testing "description" "commands" "result" "infile" "stdin"

testing "gsed n command must reset 'substituted' bit" \
	"gsed 's/1/x/;T;n;: next;s/3/y/;t quit;n;b next;: quit;q'" \
	"0\nx\n2\ny\n" "" "0\n1\n2\n3\n"

testing "gsed d does not break n,m matching" \
	"gsed -n '1d;1,3p'" \
	"second\nthird\n" "" "first\nsecond\nthird\nfourth\n"

testing "gsed d does not break n,regex matching" \
	"gsed -n '1d;1,/hir/p'" \
	"second\nthird\n" "" "first\nsecond\nthird\nfourth\n"

testing "gsed d does not break n,regex matching #2" \
	"gsed -n '1,5d;1,/hir/p'" \
	"second2\nthird2\n" "" \
	"first\nsecond\nthird\nfourth\n""first2\nsecond2\nthird2\nfourth2\n"

testing "gsed 2d;2,1p (gnu compat)" \
	"gsed -n '2d;2,1p'" \
	"third\n" "" \
	"first\nsecond\nthird\nfourth\n"

# Regex means: "match / at BOL or nothing, then one or more not-slashes".
# The bug was that second slash in /usr/lib was treated as "at BOL" too.
testing "gsed beginning (^) matches only once" \
	"gsed 's,\(^/\|\)[^/][^/]*,>\0<,g'" \
	">/usr</>lib<\n" "" \
	"/usr/lib\n"

testing "gsed c" \
	"gsed 'crepl'" \
	"repl\nrepl\n" "" \
	"first\nsecond\n"

testing "gsed nested {}s" \
	"gsed '/asd/ { p; /s/ { s/s/c/ }; p; q }'" \
	"qwe\nasd\nacd\nacd\n" "" \
	"qwe\nasd\nzxc\n"

testing "gsed a cmd ended by double backslash" \
	"gsed -e '/| one /a \\
	| three \\\\' -e '/| one-/a \\
	| three-* \\\\'" \
'	| one \\
	| three \\
	| two \\
' '' \
'	| one \\
	| two \\
'

# first three lines are deleted; 4th line is matched and printed by "2,3" and by "4" ranges
testing "gsed with N skipping lines past ranges on next cmds" \
	"gsed -n '1{N;N;d};1p;2,3p;3p;4p'" \
	"4\n4\n" "" "1\n2\n3\n4\n"

testing "gsed -i with address modifies all files, not only first" \
	"cp input input2; gsed -i -e '1s/foo/bar/' input input2 && cat input input2; rm input2" \
	"bar\nbar\n" "foo\n" ""

testing "gsed understands \r" \
	"gsed 's/r/\r/'" \
	"\rrr\n" "" "rrr\n"

testing "gsed -i finishes ranges correctly" \
	"gsed '1,2d' -i input; echo \$?; cat input" \
	"0\n3\n4\n" "1\n2\n3\n4\n" ""

testing "gsed zero chars match/replace advances correctly 1" \
	"gsed 's/l*/@/g'" \
	"@h@e@o@\n" "" "helllo\n"

testing "gsed zero chars match/replace advances correctly 2" \
	"gsed 's [^ .]* x g'" \
	"x x.x\n" "" " a.b\n"

testing "gsed zero chars match/replace logic must not falsely trigger here 1" \
	"gsed 's/a/A/g'" \
	"_AAA1AA\n" "" "_aaa1aa\n"

testing "gsed zero chars match/replace logic must not falsely trigger here 2" \
	"gsed 's/ *$/_/g'" \
	"qwerty_\n" "" "qwerty\n"

testing "gsed /\$_in_regex/ should not match newlines, only end-of-line" \
	"gsed ': testcont; /\\\\$/{ =; N; b testcont }'" \
	"\
this is a regular line
2
line with \\
continuation
more regular lines
5
line with \\
continuation
" \
	"" "\
this is a regular line
line with \\
continuation
more regular lines
line with \\
continuation
"

# testing "description" "commands" "result" "infile" "stdin"

exit $FAILCOUNT
